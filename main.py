import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import MessageHandler, filters, CallbackContext, Application, CommandHandler, CallbackQueryHandler, ContextTypes, PreCheckoutQueryHandler
import requests
import threading
import string
import asyncio
import random
import telegram
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è
from paylistener import app as pay_listener_app
from helpers import send_telegram_message as send_telegram_message

service_host = "https://wgconfigs.cm-wp.com"
PROMOS_FILE = "promos/promocodes.json"


# —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç 
bot_token = "1170371697:AAFngUiR70Z5Q0Z-aP0DVtCFyhH5Xe8Kv-A"

# —Ä–∞–±–æ—á–∏–π –±–æ—Ç 
# bot_token = "8086987257:AAFRF4z5v2Kv2lE-ZVUC5NWHSSF34GuirkU"
ALERTS_FILE = 'users/alerts.json'
USERS_FILE = 'users/users.json'
ADMIN_ID = [167176936, 771163041]

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

def load_users():
    try:
        with open(USERS_FILE, "r") as file:
            # –°—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞—ë–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ç–æ–ª—å–∫–æ –∏–∑ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_data = json.load(file)
            return set(user["id"] for user in users_data)  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ id
    except (FileNotFoundError, json.JSONDecodeError):
        return set()  # –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
    
def save_users(users):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å id –∏ registered
    user_list = [{"id": user_id, "registered": datetime.now().strftime("%Y-%m-%d %H:%M")} for user_id in users]
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
    with open(USERS_FILE, "w") as file:
        json.dump(user_list, file, ensure_ascii=False, indent=4)  # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def save_alerts(alerts):
    with open(ALERTS_FILE, "w") as file:
        json.dump(alerts, file)
        
async def show_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
        with open(USERS_FILE, 'r') as file:
            users = json.load(file)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ users - —ç—Ç–æ —Å–ø–∏—Å–æ–∫
        if isinstance(users, list):
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            total_users = len(users)
            
            # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
            today = datetime.now().date()
            
            # –ü–æ–¥—Å—á—ë—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –¥–µ–Ω—å
            new_users_today = sum(
                1 for user in users 
                if "registered" in user and datetime.strptime(user["registered"], "%Y-%m-%d %H:%M").date() == today
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –¥–µ–Ω—å: {new_users_today}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await update.message.reply_text(message)
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞: users.json –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—á–∏—Ç—ã–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def load_alerts():
    try:
        with open(ALERTS_FILE, "r") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}



    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /alert (—Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è)
async def send_alert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id not in ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ü—Ä–∏–º–µ—Ä: /alert –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    alert_message = " ".join(context.args)  # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
    users = load_users()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    alerts = load_alerts()
    alert_id = len(alerts) + 1  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è

    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    message_ids = []

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user in users:
        try:
            sent_message = await context.bot.send_message(chat_id=user, text=alert_message)
            message_ids.append({"chat_id": user, "message_id": sent_message.message_id})
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    alerts[str(alert_id)] = {
        "message": alert_message,
        "messages": message_ids
    }
    save_alerts(alerts)

    # –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {alert_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /delete_alert <id> (—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
async def delete_alert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id not in ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /delete_alert 1")
        return

    alert_id = context.args[0]  # ID —Å–æ–æ–±—â–µ–Ω–∏—è
    alerts = load_alerts()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID
    if alert_id not in alerts:
        await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {alert_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    alert = alerts[alert_id]
    for msg in alert["messages"]:
        try:
            await context.bot.delete_message(chat_id=msg["chat_id"], message_id=msg["message_id"])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg}: {e}")

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ —Ñ–∞–π–ª–∞
    del alerts[alert_id]
    save_alerts(alerts)

    await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {alert_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")

# –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    users = load_users()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")  # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    if user_id in users:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(update)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –≤–µ–¥–µ–º –µ–≥–æ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await register_user(update, context)
        users.add(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_users(users)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(update: Update) -> None:
    keyboard = [
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å VPN üî•", callback_data='buy_vpn')],
        [InlineKeyboardButton("–ú–æ–∏ VPN üìö", callback_data='list_vpn')],
        [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚ùì", callback_data='support')],
        [InlineKeyboardButton("–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ üéÅ", callback_data='demo_version')],
        [InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ üìÉ", callback_data='instruction')],
        [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ ‚ö°", callback_data='check_promocode')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    else:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def register_user(update, context) -> None:
    user_id = update.effective_user.id

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    payload = {
        "id": user_id,
        "name": update.effective_user.first_name,
        "language": update.effective_user.language_code,
        "username": update.effective_user.username
    }
    
    # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:", payload)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    response = requests.post(
        f"{service_host}/wp-json/wireguard-service/register-user", 
        json=payload
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
    if response.status_code == 200:
        data = response.json()
        
        if data.get("status") == "success":
           await show_main_menu(update)
           await context.bot.send_message(chat_id=update.message.chat_id, text=data.get("message"))
        else: 
           await context.bot.send_message(chat_id=update.message.chat_id, text=data.get("message"))
    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –Ω–µ —É–¥–∞–ª—Å—è
        await context.bot.send_message(chat_id=update.message.chat_id, text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.")


async def buy(chat_id: int, context: CallbackContext, months: int, price: int):
    title = "–ü–æ–¥–ø–∏—Å–∫–∞ StartVPN"
    description = f"–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ {months} –º–µ—Å—è—Ü(–µ–≤). –õ–æ–∫–∞—Ü–∏—è: –ï–≤—Ä–æ–ø–∞"
    payload = f"vpn_subscription_{months}"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π payload –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
    currency = "XTR"  # –ó–≤—ë–∑–¥—ã
    prices = [LabeledPrice(f"StartVPN ({months} –º–µ—Å.)", price)]  # –¶–µ–Ω–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∑–≤—ë–∑–¥–∞—Ö

    try:
        await context.bot.send_invoice(
            chat_id=chat_id,
            title=title,
            description=description,
            payload=payload,
            provider_token='',  # –î–ª—è XTR —Ç–æ–∫–µ–Ω –Ω–µ –Ω—É–∂–µ–Ω
            currency=currency,
            prices=prices,
            start_parameter="start_vpn_subscription",
        )
        logging.info(f"–°—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {title}, {price} XTR.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á—ë—Ç–∞: {e}")
        raise e  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ—Å—å –≤—ã—à–µ



async def precheckout_callback(update: Update, context: CallbackContext):
    query = update.pre_checkout_query
    if query.invoice_payload.startswith("vpn_subscription_"):
        await query.answer(ok=True)  # –£—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É
    else:
        await query.answer(ok=False, error_message="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")


async def successful_payment_callback(update: Update, context: CallbackContext):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    payment = update.message.successful_payment
    telegram_payment_charge_id = payment.telegram_payment_charge_id
    user_id = update.message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    months = payment.invoice_payload.split("_")[2]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –∏–∑ payload (–µ—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ payload)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(
    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ\n"
    f"–í–∞—à –ø–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! \n\n"
    f"üîë –ú—ã —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ –∏ —Å–æ–∑–¥–∞—ë–º –¥–ª—è –≤–∞—Å –ª–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n"
    f"üëâ **ID –ø–ª–∞—Ç–µ–∂–∞:** {telegram_payment_charge_id}\n\n"
    f"üïí –°–æ–∑–¥–∞–Ω–∏–µ QR –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 1 –º–∏–Ω—É—Ç—ã.\n\n"
    f"–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! üöÄ"
)


    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN
    try:
        await generate_vpn_config(user_id, months, update, context)
        logging.info(f"VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {months} –º–µ—Å—è—Ü–µ–≤.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")




# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    
    await query.answer()
    
    if query.data == 'buy_vpn':
        await show_vpn_options(query)
    elif query.data == 'list_vpn':
      await list_vpn(query)
    elif query.data == 'back_to_main':
      await show_main_menu(update)
    elif query.data.startswith('buy_'):
        await process_purchase(query, context)
    elif query.data == 'support':
        await support_account(query)
    elif query.data == 'demo_version':
        await demo_version(query, context)
    elif query.data == 'instruction':
        await instruction(query)
    elif query.data == 'check_promocode':
        await promocode_button(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ VPN
from datetime import datetime
from payment import generate_payment_link
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

#–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–æ invoice_id
def generate_order_id(user_id: int) -> str:
    current_date = datetime.now()
    date_part = current_date.strftime("%d%m")  # –î–µ–Ω—å –∏ –º–µ—Å—è—Ü 
    user_part = str(user_id)[:3]  # –ü–µ—Ä–≤—ã–µ —Ç—Ä–∏ —Ü–∏—Ñ—Ä—ã user_id
    return f"{date_part}{user_part}"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ VPN

from telegram import InlineKeyboardMarkup, InlineKeyboardButton
import logging

async def process_purchase(query, context: CallbackContext) -> None:
    user_id = query.from_user.id

    # –ö–∞—Ä—Ç–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
    tariff_map = {
        'buy_1_month': (1, 150, 150),
        'buy_2_month': (2, 300, 300),
        'buy_3_months': (3, 490, 490),
        'buy_6_months': (6, 880, 880),
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if query.data not in tariff_map:
        await query.edit_message_text("–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∞—Ä–∏—Ñ–∞
    months, price, stars = tariff_map[query.data]
    description = f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN –Ω–∞ {months} –º–µ—Å—è—Ü(–µ–≤)"

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ç–∞—Ä–∏—Ñ: {query.data} –Ω–∞ {months} –º–µ—Å—è—Ü(–µ–≤) –∑–∞ {price} —Ä—É–±–ª–µ–π –∏–ª–∏ {stars} –∑–≤—ë–∑–¥.")

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ `buy` –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á—ë—Ç–∞
    try:
        chat_id = query.message.chat_id  # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ CallbackQuery
        await buy(
            chat_id=chat_id,
            context=context,
            months=months,
            price=price,
        )
        await query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ buy")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")



# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ VPN
async def show_vpn_options(query) -> None:
    keyboard = [
        [InlineKeyboardButton("1 –º–µ—Å—è—Ü (150‚≠ê)", callback_data='buy_1_month')],
        [InlineKeyboardButton("2 –º–µ—Å—è—Ü–∞ (300‚≠ê)", callback_data='buy_2_month')],
        [InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ (450‚≠ê)", callback_data='buy_3_months')],
        [InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ (880‚≠ê)", callback_data='buy_6_months')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=reply_markup)


# –ú–µ–Ω—é "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
# async def show_profile_menu(query) -> None:
#     keyboard = [
#         [InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='check_balance')],
#         [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ VPN", callback_data='list_vpn')],
#         [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main')],
#     ]
#     reply_markup = InlineKeyboardMarkup(keyboard)
#     await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def support_account(query) -> None:
    keyboard = [
        [InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url="https://t.me/kotashov_dev")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await query.edit_message_text(
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
        reply_markup=reply_markup
    )    

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
async def instruction(query) -> None:
    # url
    instruction_url = "https://payway.store/vpn/"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –≤–∞–º —Å—Å—ã–ª–∫—É

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É
    keyboard = [
        [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", url=instruction_url)],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main')]
        
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Å—ã–ª–∫—É
    await query.edit_message_text(
        "–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å:",
        reply_markup=reply_markup
    )
    

async def demo_version(query, context) -> None:
    
    user_id = query.from_user.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    response = requests.post(f"{service_host}/wp-json/wireguard-service/trial", 
        json={"id": user_id}
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
    if response.status_code == 200:
        data = response.json()

        if data.get("status") == "success":
           instruction_url = "https://payway.store/vpn/"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –≤–∞–º —Å—Å—ã–ª–∫—É

           await query.edit_message_text("–í–∞—à —Ç—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
           await context.bot.sendPhoto(chat_id=query.message.chat_id, photo=data.get('qr_code_url'), caption=f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å QR –∫–æ–¥. –ß–∏—Ç–∞–π—Ç–µ —Ç—É—Ç: {instruction_url}")
        else: 
           await context.bot.send_message(chat_id=query.message.chat_id, text=data.get("message"))
    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –Ω–µ —É–¥–∞–ª—Å—è
        await context.bot.send_message(chat_id=query.message.chat_id, text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–∏–∞–ª–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.")

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    await query.message.reply_text(
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main')]])
    )
    

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
# async def check_balance(query) -> None:
#     user_id = query.from_user.id
    
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
#     response = requests.post(
#         "https://site.ru/get-balance",
#         json={"user_id": user_id}
#     )
    
#     if response.status_code == 200:
#         data = response.json()
#         balance = data.get("balance", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å")
#         await query.edit_message_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±–ª–µ–π.")
#     else:
#         await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# async def handle_generate_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
#     """
#     –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /generate –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
#     """
#     user_id = update.effective_user.id
#     months = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–¥–∞–µ–º 1 –º–µ—Å—è—Ü

#     try:
#         # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
#         logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏—é VPN –Ω–∞ {months} –º–µ—Å—è—Ü.")

#         # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
#         await generate_vpn_config(user_id, months, update, context)

#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ–º–∞–Ω–¥—ã /generate: {e}")
#         await context.bot.send_message(
#             chat_id=update.effective_chat.id,
#             text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
#         )


async def generate_vpn_config(user_id: int, months: int, update, context):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤.
    """
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    logging.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {months} –º–µ—Å—è—Ü–µ–≤.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    response = requests.post(
        f"{service_host}/wp-json/wireguard-service/generate-config",
        json={"id": user_id, "months": months}
    )

    logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç API: {response.json()}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if response.status_code == 200:
        data = response.json()

        if data.get("status") == "success":
            # –ü–æ–ª—É—á–∞–µ–º URL QR-–∫–æ–¥–∞ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            qr_code_url = data.get("qr_code_url")
            instruction_url = "https://payway.store/vpn/"  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é

            if qr_code_url:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è VPN —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!"
                )
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=qr_code_url,
                    caption=f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å QR-–∫–æ–¥. –ß–∏—Ç–∞–π—Ç–µ —Ç—É—Ç: {instruction_url}"
                )
            else:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL QR-–∫–æ–¥–∞.")
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            error_message = data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.")
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"–û—à–∏–±–∫–∞: {error_message}"
            )
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN.")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VPN. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main')]])
    )



# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ VPN
async def list_vpn(query) -> None:
    user_id = query.from_user.id

    logging.info(f"—Ç–µ—Å—Ç")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ VPN
    response = requests.post(
        f"{service_host}/wp-json/wireguard-service/vpn-list",
        json={"id": user_id}
    )
    
    if response.status_code == 200:
        data = response.json()

        if data.get("status") == "success":
            orders = data.get("orders", [])

            keyboard = []
            
            for order in orders:
                logging.info(f"Order {order}")
                qr_code_url = order.get('qr_code_url')

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if qr_code_url:
                    keyboard.append([InlineKeyboardButton("VPN " + order.get('plan'), url=qr_code_url)])
                else:
                    logging.error(f"Invalid QR code URL for order {order}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main')])

            if keyboard:
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text("–í–∞—à —Å–ø–∏—Å–æ–∫ VPN: ", reply_markup=reply_markup)    
            else:
                await query.edit_message_text("–°–ø–∏—Å–æ–∫ VPN –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ URL.")   
        else: 
           await query.edit_message_text(data.get("message")) 
    else:
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ VPN. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        

import requests
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto

async def get_vpn_from_promo(months: int, user_id: int, update, context) -> None:
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É
        response = requests.post(
            f"{service_host}/wp-json/wireguard-service/promo-vpn",
            json={"id": user_id, "months": months}
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
        if response.status_code == 200:
            response_data = response.json()  # –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç
            status = response_data.get("status")  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
            
            if status == "success":  # –£—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image_url = response_data.get("qr_code")  # –û–∂–∏–¥–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è QR-–∫–æ–¥–∞
                if not image_url:
                    raise Exception("–ü–æ—Ö–æ–∂–µ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—É, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ–∂–∫—É –¥–ª—è –ø–æ–º–æ—â–∏.")

                # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞
                qr_image_response = requests.get(image_url)
                if qr_image_response.status_code != 200:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞.")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
                keyboard = [
                    [
                        InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", url='https://wgconfigs.cm-wp.com/'),
                        InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ InputMediaPhoto
                qr_image = qr_image_response.content
                await context.bot.send_photo(
                    chat_id=update.message.chat_id,
                    photo=qr_image,
                    caption=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–æ—Ç –≤–∞—à QR-–∫–æ–¥ –Ω–∞ {months} –º–µ—Å—è—Ü(–∞).",
                    reply_markup=reply_markup
                )
            else:
                raise Exception(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN: —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ - {status}")
        else:
            raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ {response.status_code}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {response.text}")

    except requests.RequestException as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∞
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –æ—à–∏–±–∫–∏
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


def generate_random_promo(length=8):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª–∏–Ω–æ–π length, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä."""
    characters = string.ascii_letters + string.digits  # –ë—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
    return ''.join(random.choice(characters) for _ in range(length))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
async def generate_promo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if update.message.from_user.id not in ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        args = context.args
        if len(args) != 2:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /generate_promo <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å>")
            return
        
        num_promos = int(args[0])  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        months = int(args[1])  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–µ—Å—è—Ü–∞—Ö
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        promos = {}
        for _ in range(num_promos):
            promo_code = generate_random_promo()  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
            promos[promo_code] = months  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Å–ª–æ–≤–∞—Ä—å
        
        # –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
        try:
            with open(PROMOS_FILE, "r") as file:
                existing_promos = json.load(file)
        except FileNotFoundError:
            existing_promos = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        existing_promos.update(promos)
        with open(PROMOS_FILE, "w") as file:
            json.dump(existing_promos, file, indent=4)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—Å–ø–µ—à–Ω—ã–º–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
        promo_list = "\n".join([f"{promo}: {months} –º–µ—Å—è—Ü(–∞)" for promo in promos])
        await update.message.reply_text(f"–£—Å–ø–µ—à–Ω–æ! –í–æ—Ç –≤–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n{promo_list}")
    
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


async def promocode_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥
    keyboard = [
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=reply_markup)


async def handle_promocode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º."""
    promocode = update.message.text.strip()
    user_id = update.effective_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    try:
        # –ß—Ç–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
        with open(PROMOS_FILE, "r") as file:
            promos = json.load(file)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        if promocode in promos:
            months = promos[promocode]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏

            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ (–µ—Å–ª–∏ –æ–Ω –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π)
            del promos[promocode]
            with open(PROMOS_FILE, "w") as file:
                json.dump(promos, file)

            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN
            get_vpn_from_promo(months, user_id)  # –ü–µ—Ä–µ–¥–∞—ë–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            await update.message.reply_text(f"–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω VPN –Ω–∞ {months} –º–µ—Å—è—Ü(–∞).")
        else:
            # –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    except FileNotFoundError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        await update.message.reply_text("–§–∞–π–ª —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except json.JSONDecodeError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception as e:
        # –ü—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")


promocode_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_promocode)

def run_flask():
    app.run(host='0.0.0.0', port=5000) 

def main() -> None:

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Application
    application = Application.builder().token(bot_token).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("alert", send_alert))
    application.add_handler(CallbackQueryHandler(button))
    # application.add_handler(CallbackQueryHandler(check_balance, pattern="check_balance"))
    application.add_handler(CallbackQueryHandler(list_vpn, pattern="list_vpn"))
    application.add_handler(CommandHandler("delete_alert", delete_alert))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    application.add_handler(CommandHandler('show_users', show_users))
    application.add_handler(CommandHandler("generate_promo", generate_promo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_promocode))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    application.add_handler(CommandHandler("buy", buy))
    application.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))
    # application.add_handler(CommandHandler("generate", handle_generate_command))

    # application.add_handler(CommandHandler("test_vpn", test_vpn_command))

    threading.Thread(target=pay_listener_app.run, kwargs={'host': '0.0.0.0', 'port': 5000}).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞
    main()